# frozen_string_literal: false
#!/usr/bin/env ruby

board = [' 1 | 2 | 3 ', ' 4 | 5 | 6 ', ' 7 | 8 | 9 ']
$current_turn = 0
$game_on = true

# Get the player name
class PlayerNameInput
  def name_input(player, player_1 = nil)
    p "Enter a name for player #{player}:"
    check = false
    while check == false
      player_name = gets.chomp
      player_name.split('').input_validation(player_1, true, player)
      check = true if player_name.split('').input_validation(player_1, false, player) == true
    end
    player_name
  end
end

# Enumerables to watch for arays
module Enumerable
  def array_include?(arg)
    arg.length.times do |n|
      return false unless include?(arg[n])
    end
    true
  end

  def input_validation(player_name_1 = nil, print = true, player_number)
    if empty?
      return p "Your name can't be empty, try to type a diferent one for player #{player_number}" if print
    elsif join == player_name_1
      return p "You can't choose the same name as #{player_name_1}, try to type a diferent one for player #{player_number}" if print
    elsif all?(' ')
      return p "Your must have at least one visible character, try to type a diferent one for player #{player_number}" if print
    else
      true
    end
  end
end

# User prints the board
class UserDisplay
  def self.print_board(grid)
    p '********************'
    grid.length.times { |n| p grid[n] }
    p '********************'
  end

  def wich_turn(player_1_name, player_2_name)
    player_turn_name = player_1_name if $current_turn.even?
    mark = 'X' if $current_turn.even?
    player_turn_name = player_2_name if $current_turn.odd?
    mark = 'O' if $current_turn.odd?
    p "It's #{player_turn_name}'s turn' ('#{mark}'), make your move:"
  end
end

# Validate if the movement is possible
class PlayerMoveInput
  @@valid_moves = %w[1 2 3 4 5 6 7 8 9]
  def validate_move(player_mark, modified_grid, player_1_name, player_2_name)
    valid_move = false
    @@valid_moves.length.times do |n|
      if player_mark == @@valid_moves[n]
        valid_move = true
        @@valid_moves.delete(player_mark)
        move_print(player_mark, modified_grid)
        UserDisplay.new.wich_turn(player_1_name, player_2_name) if $game_on
        UserDisplay.print_board(modified_grid)
        next
      end
    end
    return if valid_move == false
      p "That's not a valid move, try again" if $game_on
      UserDisplay.new.wich_turn(player_1_name, player_2_name) if $game_on
      UserDisplay.print_board(modified_grid) if $game_on
    end
  end

  def move_print(player_mark_print, modified_grid_print)
    player_turn_print = 'X' if $current_turn.even?
    player_turn_print = 'O' if $current_turn.odd?
    modified_grid_print.each do |sub_array|
      sub_array.length.times do |n|
        if player_mark_print == sub_array[n]
          sub_array[n] = player_turn_print
          $current_turn += 1
          modified_grid_print
        end
      end
    end
  end

confirm_name = 'n'
player_1 = ''
player_2 = ''

p 'First, input a name for each player. Spaces in the name will be deleted'
p '*********************'

while confirm_name == 'n'
  player_1 = PlayerNameInput.new.name_input('1')
  p '**********************'
  p "Player 1 name is #{player_1}!"
  p "Is the name correct? type 'n' to correct or hit enter to continue"
  confirm_name = gets.chomp
end
confirm_name = 'n'
while confirm_name == 'n'
  player_2 = PlayerNameInput.new.name_input('2', player_1)
  p '************************'
  p "Player 2 name is #{player_2}!"
  p "Is the name correct? type 'n' to correct or hit enter to continue"
  confirm_name = gets.chomp
end


UserDisplay.new.wich_turn(player_1, player_2)
UserDisplay.print_board(board)

while $game_on
  player_move = gets.chomp.delete(' ')
  p PlayerMoveInput.new.validate_move(player_move, board, player_1, player_2)
end
